// time complexity= O(n^2)


int minCut(string s) {
        int n=s.size();
        bool dp[n][n];
        for(int g=0;g<n;g++) {
            for(int i=0,j=g;j<n;i++,j++) {
                if(g==0) {
                    dp[i][j]=true;  // 1 length string is always plaindrome
                }
                else if(g==1) {
                    dp[i][j] = s[i]==s[j]; // check for 1st and last character for 2 length string
                }
                else {
                    dp[i][j] = (s[i]==s[j] and dp[i+1][j-1]); //  check for 1st and last character  and check middle part from dp 
                }
            }
        }
        
        int partition[n];
        partition[0]=0;
        for(int j=1;j<n;j++) {
            if(dp[0][j]) partition[j]=0; // check for whole string 0-j
            else {
                int minn = INT_MAX; 
                for(int i=j;i>=1;i--) {
                    if(dp[i][j]){
                        if(partition[i-1]<minn) minn=partition[i-1]; // if length =3 then check for 1-3,2-3,3-3 and select minn partion value
                    }
                }
                partition[j]=minn+1; // save the result and 1 for new partition
            }
        }
        return partition[n-1];
    }
